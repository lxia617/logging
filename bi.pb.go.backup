// Code generated by protoc-gen-go.
// source: bi.proto
// DO NOT EDIT!

/*
Package p is a generated protocol buffer package.

It is generated from these files:
	bi.proto

It has these top-level messages:
	BiLog
	BiResult
*/
package p

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type BiLog struct {
	ProjectName string `protobuf:"bytes,1,opt,name=projectName" json:"projectName,omitempty"`
	ActionName  string `protobuf:"bytes,2,opt,name=actionName" json:"actionName,omitempty"`
	Timestamp   int64  `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Detail      []byte `protobuf:"bytes,4,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (m *BiLog) Reset()         { *m = BiLog{} }
func (m *BiLog) String() string { return proto.CompactTextString(m) }
func (*BiLog) ProtoMessage()    {}

type BiResult struct {
	Result bool   `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Msg    string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *BiResult) Reset()         { *m = BiResult{} }
func (m *BiResult) String() string { return proto.CompactTextString(m) }
func (*BiResult) ProtoMessage()    {}

func init() {
}

// Client API for MisBi service

type MisBiClient interface {
	Bi(ctx context.Context, in *BiLog, opts ...grpc.CallOption) (*BiResult, error)
}

type misBiClient struct {
	cc *grpc.ClientConn
}

func NewMisBiClient(cc *grpc.ClientConn) MisBiClient {
	return &misBiClient{cc}
}

func (c *misBiClient) Bi(ctx context.Context, in *BiLog, opts ...grpc.CallOption) (*BiResult, error) {
	out := new(BiResult)
	err := grpc.Invoke(ctx, "/p.MisBi/Bi", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MisBi service

type MisBiServer interface {
	Bi(context.Context, *BiLog) (*BiResult, error)
}

func RegisterMisBiServer(s *grpc.Server, srv MisBiServer) {
	s.RegisterService(&_MisBi_serviceDesc, srv)
}

func _MisBi_Bi_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(BiLog)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(MisBiServer).Bi(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _MisBi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "p.MisBi",
	HandlerType: (*MisBiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Bi",
			Handler:    _MisBi_Bi_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
